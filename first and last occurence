class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        
        int low = 0;
        int high = nums.size() - 1;
        int firstOccurrence = -1;
        int lastOccurrence = -1;
        
        // Find the first occurrence
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                firstOccurrence = mid;
                high = mid - 1; // Continue searching left side for first occurrence
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        // Find the last occurrence
        low = 0;
        high = nums.size() - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                lastOccurrence = mid;
                low = mid + 1; // Continue searching right side for last occurrence
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return {firstOccurrence, lastOccurrence};
    }
};
