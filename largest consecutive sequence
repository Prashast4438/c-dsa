class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
                               
    int n = nums.size();
    if (n == 0) return 0;

    //sort the array:
    sort(nums.begin(), nums.end());
    int lastSmaller = INT_MIN;
    int cnt = 0;
    int longest = 1;

    //find longest sequence:
    for (int i = 0; i < n; i++) {
        if (nums[i] - 1 == lastSmaller) {
            //a[i] is the next element of the
            //current sequence.
            cnt += 1;
            lastSmaller = nums[i];
        }
        else if (nums[i] != lastSmaller) {
            cnt = 1;
            lastSmaller = nums[i];
        }
        longest = max(longest, cnt);
    }
    return longest;

        
    }
};
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        std::sort(nums.begin(),nums.end());
        int largest=1;
        int count=0;
        int previous=INT_MIN;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]-1==previous)
            {
            count++;
            previous++;
            }
          else if(nums[i]!=previous)
          {
          count=1;
          previous=nums[i];
          }
          largest=std::max(largest,count);
        }
        return largest;
        
    }











class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
         
    if (nums.size()== 0) return 0;

        std::sort(nums.begin(),nums.end());
        int largest=-1;
        int count=0;
        int previous;
        for(int i=0;i<=nums.size()-1;i++)
        {
            if(nums[i]-1==previous)
            {
            count++;
            previous++;
            }
          else if(nums[i]-1!=previous)
          {
          count=1;
          previous=nums[i];
          }
          largest=std::max(largest,count);
        }
        return largest;
        
    }
};
