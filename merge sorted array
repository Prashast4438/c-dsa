class Solution {
public:
    void merge(vector<int>& arr1, int m, vector<int>& arr2, int n) {
 int left = m - 1; // Last element in the valid range of arr1
        int right = 0;    // First element of arr2

        // Swap elements until arr1[left] is smaller than arr2[right]
        while (left >= 0 && right < n) {
            if (arr1[left] > arr2[right]) {
                swap(arr1[left], arr2[right]);
                left--;
                right++;
            } else {
                break;
            }
        }

        // Sort arr1[] and arr2[] individually
        sort(arr1.begin(), arr1.begin() + m);
        sort(arr2.begin(), arr2.begin() + n);

        // Merge arr2 into arr1 starting from the m-th position
        for (int i = 0; i < n; ++i) {
            arr1[m + i] = arr2[i];
        }
    }
    
};
